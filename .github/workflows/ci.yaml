name: CI Pipeline

on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --statistics

      - name: Test with pytest
        run: pytest -v

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t tiny-service:latest .

      - name: Test Docker image
        run: |
          docker run -d --name test-container -p 8080:8000 tiny-service:latest
          sleep 10
          curl -f http://localhost:8080/healthz
          curl -f "http://localhost:8080/greet?name=Docker"
          curl -f http://localhost:8080/metrics
          docker stop test-container

      # For now, save image as artifact instead of using docker registry
      # This avoids need for registry setup and credentials
      - name: Save Docker image
        run: docker save tiny-service:latest -o tiny-service.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: tiny-service.tar

      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "tiny-service:latest"
          format: "table"

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - uses: actions/checkout@v4

      # Reuse the same image from build job instead of rebuilding
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load -i tiny-service.tar

      - name: Create kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: tiny-service

      - name: Load image into kind
        run: kind load docker-image tiny-service:latest --name tiny-service

      - name: Create secret
        run: |
          kubectl create secret generic tiny-service-secret \
            --from-literal=welcome-prefix="$(echo -n '${{ secrets.WELCOME_PREFIX || 'Hello from CI' }}' | base64)"

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl rollout status deployment/tiny-service --timeout=300s

      - name: Test deployment
        run: |
          kubectl port-forward service/tiny-service 8080:80 &
          sleep 10
          curl -f http://localhost:8080/healthz
          curl -f "http://localhost:8080/greet?name=K8s"
          curl -f http://localhost:8080/metrics
